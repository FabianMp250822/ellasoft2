rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS

    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superadmin == true;
    }

    function isResourceOwner(resource) {
      return isSignedIn() && request.auth.token.organizationId == resource.data.organizationId;
    }

    function isCreatingForOwnOrg() {
      return isSignedIn() && request.auth.token.organizationId == request.resource.data.organizationId;
    }

    function isNotChangingOrgId() {
      return request.resource.data.organizationId == resource.data.organizationId;
    }

    // TENANT-SPECIFIC COLLECTIONS
    match /subjects/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /grades/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /students/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /teachers/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /academicPeriods/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /gradingSystems/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /performanceIndicators/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    match /academicLoads/{docId} {
      allow read, list: if isSuperAdmin() || (isSignedIn() && resource.data.organizationId == request.auth.token.organizationId);
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update, delete: if isResourceOwner(resource) || isSuperAdmin();
    }

    // SUPERADMIN-ONLY COLLECTIONS

    match /organizations/{orgId} {
      allow read, list: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId || isSuperAdmin();
      allow write: if isSuperAdmin();
    }
  }
}
