rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin of a specific organization
    function isOrganizationAdmin(orgId) {
      return request.auth.token.admin == true && request.auth.token.organizationId == orgId;
    }
    
    // Helper function to check if a user is a superadmin
    function isSuperAdmin() {
      return request.auth.token.superadmin == true;
    }

    // Helper function to check if the user belongs to the organization.
    // This will be the primary check for most resources.
    function isOrganizationMember(orgId) {
      return request.auth.token.organizationId == orgId;
    }

    // Rules for organizations collection
    match /organizations/{orgId} {
      // Superadmins can read and write all organization documents
      allow read, write: if isSuperAdmin();
      
      // Organization admins can read their own organization's document
      allow get: if isOrganizationAdmin(orgId);
    }
    
    // Generic rules for collections tied to an organization
    match /{collection}/{docId} 
      where collection in ['academicPeriods', 'gradingSystems', 'grades', 'subjects', 'teachers', 'students'] {
      
      // Allow access if the user is a member of the organization linked to the document.
      // This rule correctly handles both read (using resource.data) and write (using request.resource.data) operations.
      allow read, write: if 
        (request.method in ['get', 'list'] && isOrganizationMember(resource.data.organizationId)) ||
        (request.method in ['create', 'update', 'delete'] && isOrganizationMember(request.resource.data.organizationId));
    }
  }
}
