rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // HELPER FUNCTIONS
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superadmin == true;
    }
    
    // Checks if the user is requesting documents for their own organization.
    // This is used for LIST queries where we don't have a single resource.
    function isRequestingOwnOrgData() {
      return isSignedIn() && request.auth.token.organizationId == request.query.resource.data.organizationId;
    }

    // Checks if the user belongs to the organization that owns the resource.
    // This is used for GET, UPDATE, DELETE on a single document.
    function isResourceOwner(resource) {
      return isSignedIn() && request.auth.token.organizationId == resource.data.organizationId;
    }
    
    // Checks if the user is creating a resource for their own organization.
    function isCreatingForOwnOrg() {
      return isSignedIn() && request.auth.token.organizationId == request.resource.data.organizationId;
    }
    
    // Checks that the organizationId is not being changed during an update.
    function isNotChangingOrgId() {
      return request.resource.data.organizationId == resource.data.organizationId;
    }

    // RULES FOR TENANT-SPECIFIC COLLECTIONS
    
    match /subjects/{docId} {
      // Allow GET on a single doc if owner, or LIST if querying for own org.
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }
    
    match /grades/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }
    
    match /students/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }
    
    match /teachers/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }

    match /academicPeriods/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }

    match /gradingSystems/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }

    match /performanceIndicators/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }

    match /academicLoads/{docId} {
      allow read: if isResourceOwner(resource) || isRequestingOwnOrgData() || isSuperAdmin();
      allow delete: if isResourceOwner(resource) || isSuperAdmin();
      allow create: if isCreatingForOwnOrg() || isSuperAdmin();
      allow update: if (isResourceOwner(resource) && isNotChangingOrgId()) || isSuperAdmin();
    }

    // RULES FOR SUPERADMIN-ONLY COLLECTIONS
    
    match /organizations/{orgId} {
      allow read, write: if isSuperAdmin();
    }
  }
}
